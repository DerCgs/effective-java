package org.dercg.effectivejava.a_01_staticmothed;

public class main {
    /** 给客户端提供一个自身实例的方法
     * 1、公有的构造器
     * 2、提供静态工厂方法
     *
     * 静态工厂方法相比构造器的优势
     * 1、有名称  静态工厂方法相比 构造器能更确切地描述返回的对象
     *      当一个类需要多个带有相同签名的构造器时，就用静态工厂方法代替构造器，并仔细选择名称以突出区别
     * 2、不必每次 调用的时候都创建一个新对象（类似于享元模式）
     *      可以使用预先构建好的实例，或者将构建好的实例缓存起来，进行重复利用，从而避免创建不必要的重复对象。
     * 3、可以返回原返回类型的任何子类对象
     *      适用于基于接口的框架，可以隐藏实现类，会使API变得更加简洁。
     * 4、所有返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值。
     *      只要是已声明的返回类型的子类型，都是允许的。返回对象的类可能随着发行版本的不同而不同。
     * 5、方法返回的对象所属的类，在编写该静态工厂方法的类时，可以不存在。:
     *
     * 静态工厂方法的缺点
     * 1、类如果不含共有或者受保护的构造器，就不能被子类化
     * 2、程序员不好发现这些API
    **/
    public static void main(String[] args) {
        Boolean.valueOf(false);
//        BigInteger.probablePrime()
    }
    public static Boolean valueOf(boolean b) {
        return b ? Boolean.TRUE : Boolean.FALSE;
    }
}
